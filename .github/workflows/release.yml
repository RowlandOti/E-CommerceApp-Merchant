name: Deploying to Playstore
on:
  push:
    branches:
      - release/**
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.DUKA_MERCHANT_SDK_KEY }}
      - uses: actions/checkout@v3
        with:
          token: ${{secrets.GA_TOKEN}}
          submodules: recursive
          lfs: false
          fetch-depth: 0

      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'adopt-hotspot'
          java-version: 11

      - uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6'

      - name: Cache Ruby - Bundler
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/build.gradle') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: Grant Permission to Execute
        run: chmod +x gradlew

      - name: Install bundle
        run: |
          gem update bundler
          bundle update --bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Configure Keystore
        run: |
          echo "$ANDROID_KEYSTORE_FILE" > ./.buildsystem/keystore.jks.b64
          base64 -d -i ./.buildsystem/keystore.jks.b64 > ./.buildsystem/keystore.jks
          echo "storeFile=../.buildsystem/keystore.jks" >> ./.buildsystem/keystore.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> ./.buildsystem/keystore.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> ./.buildsystem/keystore.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> ./.buildsystem/keystore.properties
        env:
          ANDROID_KEYSTORE_FILE: ${{ secrets.ANDROID_KEYSTORE_FILE }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.ANDROID_KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_STORE_PASSWORD }}

      - name: Create Google Play Config file
        run: |
          echo "$PLAYSTORE_SERVICES_CONFIG" > ./.buildsystem/playstore_services_config.json.b64
          base64 -d -i ./.buildsystem/playstore_services_config.json.b64 > ./.buildsystem/playstore_services_config.json
        env:
          PLAYSTORE_SERVICES_CONFIG: ${{ secrets.PLAYSTORE_SERVICES_CONFIG }}

      - name: Build Release APK and Bundle ðŸš€
        run: ./gradlew clean assembleRelease bundleRelease

      - name: Distribute app to Alpha track ðŸš€
        run: bundle exec fastlane deployAlpha

      - name: Generate CHANGELOG.md
        id: generate_change_log
        uses: BobAnkh/auto-generate-changelog@master
        with:
          REPO_NAME: 'RowlandOti/E-CommerceApp-Merchant'
          BRANCH: 'docs/changelog'
          PULL_REQUEST: 'main'
          ACCESS_TOKEN: ${{secrets.GA_TOKEN}}
          PATH: 'CHANGELOG.md'
          COMMIT_MESSAGE: 'docs(CHANGELOG): update release notes'
          TYPE: 'ci:Continuous Integration,test:Tests,feat:New Features,fix:Bug Fixes,lint:Code Style Fixes,docs:Documentation,refactor:Refactors,perf:Performance Improvements'

      - name: Create Release
        id: create_release
        uses: actions/create-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GA_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Bundle
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: 'ui/build/outputs/bundle/release/ui-release.aab'
          asset_name: ${{ github.ref }}.aab
          asset_content_type: application/zip

      - name: Upload Release APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: 'ui/build/outputs/apk/release/ui-release.apk'
          asset_name: ${{ github.ref }}.apk
          asset_content_type: application/zip